import pandas as pd

configfile: "config/config.yaml"
IN = config["input_dir"]
OUT = config["output_dir"]


if not config["cutadapt"]["adapters"]:
	in_ext = config["fastq"]
else:
	in_ext = ".trimmed"+config["fastq"]

if config["samtools"]["rm_duplicates"]:
	samtype="rmdups"
else:
	samtype="sorted"

def getGenome(wildcards):
  return("{0}/{1}{2}".format(config["genome"][wildcards.genome]["dir"],config["genome"][wildcards.genome]["name"],config["genome"][wildcards.genome]["ext"]))



include:"rules/novoalign.smk"
include:"rules/samtools.smk"


if config["demultiplexing"]["demultiplex"]:
	rule all:
		input:
			#expand(OUT+"/{genome}/coverage/{samtype}/{sample}_{barcode}.{samtype}.{type}.bedGraph",samtype=["umidedup","sorted"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"],type=["normalized","unnormalized","3prime_normalized","3prime_unnormalized"])
			expand(OUT+"/{genome}/mapping/coverage/{type}/{sample}_{barcode}.{type}.bedGraph",type=["umidedup","rmdups"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"]),
			#expand(OUT+"/demultiplex/{sample}_{barcode}.trimmed"+config["fastq"],sample = config["samples"],barcode=config["demultiplexing"]["barcode"])
			#expand(OUT+"/{genome}/mapping/pyClusterReads/{sample}_{barcode}.clusters.gtf",genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"])
else:
	rule all:
		input:
			expand(OUT+"/{genome}/mapping/coverage/{type}/{sample}.{type}.bedGraph",type=["umidedup","rmdups"],genome=config["genome"].keys(),sample = config["samples"]),
			





rule make_barcode:
	output: 
		OUT+"/barcode.fa"
	run:
		with open(output[0], 'w') as out:
			for k, v in config["demultiplexing"]["barcode"].items():
				if config["demultiplexing"]["five_prime"]:
					out.write(">"+str(k)+ '\n^'+ str(v) + '\n')
				else:
					out.write(">"+str(k)+ '\n'+ str(v) + '$\n')


def getOutFormat(wildcards):
  return(OUT+"/demultiplex/"+wildcards.sample+"_{name}"+config["fastq"])

rule cutadapt_demultiplex:
	input:
		barcode = OUT+"/barcode.fa",
		fastq = OUT+"/umi/{sample}.umi"+config["fastq"]
	output:
		expand(OUT+"/demultiplex/{{sample}}_{barcode}"+config["fastq"],barcode=config["demultiplexing"]["barcode"])
	log:OUT+"/demultiplex/{sample}.demultiplex.qc"
	threads:config["threads"]
	params:
		extra = config["demultiplexing"]["extra"],
		outformat= getOutFormat,
		errorate = config["demultiplexing"]["errorate"]
	conda:
		"envs/cutadapt.yaml"
	shell:
		"cutadapt -e {params.errorate} -j {threads} -g file:{input.barcode} -o '{params.outformat}' {input.fastq} > {log}"


rule cutadapt:
	input:
		fastq=OUT+"/demultiplex/{prefix}"+config["fastq"]
	output:
		fastq=OUT+"/demultiplex/{prefix}.trimmed"+config["fastq"],
		qc=OUT+"/demultiplex/{prefix}.trimmed.qc"
	threads:config["threads"]
	params:
		adapters = config["cutadapt"]["adapters"],
		extra = config["cutadapt"]["extra"]
	conda:
		"envs/cutadapt.yaml"
	shell:
		"cutadapt {params.adapters} {params.extra} -j {threads} -o {output.fastq} {input} > {output.qc}"


if config["umi_tools"]["extract"]["five_prime"]:
	umi_extract_extra = config["umi_tools"]["extract"]["extra"]+""
else:
	umi_extract_extra = config["umi_tools"]["extract"]["extra"]+" --3prime"

rule umi_extract:
	input:
		fastq=IN+"/{sample}"+config["fastq"]
	output:
		fastq=OUT+"/umi/{sample}.umi"+config["fastq"]
	log:OUT+"/umi/{sample}.umi.log"
	conda:
		"envs/umi_tools.yaml"
	params:
		extra= umi_extract_extra,
		bc_pattern=config["umi_tools"]["extract"]["bc-pattern"],
		extract_method=config["umi_tools"]["extract"]["extract-method"]
	shell:
		"umi_tools extract --bc-pattern={params.bc_pattern} --extract-method={params.extract_method} --log={log} --stdout={output.fastq} --stdin={input.fastq} {params.extra}"

rule umi_dedup:
	input:
		bam=OUT+"/{genome}/mapping/bam/sorted/{prefix}.sorted.bam",
		bai=OUT+"/{genome}/mapping/bam/sorted/{prefix}.sorted.bai"
	output:
		bam=OUT+"/{genome}/mapping/bam/umidedup/{prefix}.umidedup.bam"
	conda:
		"envs/umi_tools.yaml"
	params:
		extra= umi_extract_extra,
		bc_pattern=config["umi_tools"]["extract"]["bc-pattern"],
		extract_method=config["umi_tools"]["extract"]["extract-method"]
	shell:
		"umi_tools dedup -I {input.bam} --output-stats=deduplicated -S {output.bam}"




rule pyReadCounters:
	input:
		sam=OUT+"/{genome}/mapping/sam/{prefix}.sam",
		gtf=lambda wildcards: config[wildcards.genome]["gtf"]
	output:
		expand(OUT+"/{{genome}}/mapping/pyReadCounters/{{prefix}}_{generation_type}",generation_type = ["hittable_reads.txt","file_statistics_reads.txt","count_output_reads.gtf"])
	conda: "envs/pipeline.yaml"
	params:
		outfile = OUT+"/{genome}/mapping/pyReadCounters/{prefix}"
	shell:
		"python pycrac/pyCRAC/pyReadCounters.py -f {input.sam} --file_type=sam --gtf={input.gtf} -o {params.outfile}"



rule pyClusterReads:
	input:
		gtf_pyreadcounters=OUT+"/{genome}/mapping/pyReadCounters/{prefix}_count_output_reads.gtf",
		gtf=lambda wildcards: config[wildcards.genome]["gtf"]
	output:
		OUT+"/{genome}/mapping/pyClusterReads/{prefix}.clusters.gtf"
	conda: "envs/pipeline.yaml"
	params:
		outfile = OUT+"/{genome}/mapping/pyClusterReads/{prefix}.clusters.gtf"
	shell:
		"python pycrac/pyCRAC/pyClusterReads.py -f {input.gtf_pyreadcounters} --gtf={input.gtf} -o {params.outfile}"





rule generate_coverage:
	input:
		bam=OUT+"/{genome}/mapping/bam/{samtype}/{prefix}.{samtype}.bam",
		bai=OUT+"/{genome}/mapping/bam/{samtype}/{prefix}.{samtype}.bai"
	output:
		OUT+"/{genome}/mapping/coverage/{samtype}/{prefix}.{samtype}.bedGraph"
	conda: "envs/deeptools.yaml"
	shell:
		"bamCoverage -of bedgraph -b {input.bam} -o {output} --normalizeUsing None -bs 1"


def getbed(wildcards):
  return(config["genome"][wildcards.genome]["bed"])


rule generate_coverage_for_rDNA:
	input:
		bam=OUT+"/{genome}/mapping/bam/{samtype}/{prefix}.{samtype}.bam",
		bai=OUT+"/{genome}/mapping/bam/{samtype}/{prefix}.{samtype}.bai",
		bed=getbed
	output:
		OUT+"/{genome}/mapping/coverage/{samtype}/{prefix}.{samtype}.bedReporting.tsv"
	conda: "envs/bedtools.yaml"
	shell:
		"bedtools coverage -a {input.bed} -b {input.bam} > {output}"