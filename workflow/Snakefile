import pandas as pd
import datetime
import os

configfile: "config/config.yaml"
IN = config["input_dir"]

OUT = config["output_dir"]+"/"+str(datetime.date.today())
#OUT = config["output_dir"]+"/2022-09-09"



name,ext = os.path.splitext(config["fastq"])
if ext == ".gz":
        rule decompress:
                input:IN+"/{sample}"+config["fastq"]
                output:temp(IN+"/{sample}"+name)
                shell:"gunzip -c {input} > {output}"

        EXT=name
else:
        EXT=config["fastq"]

if config["samtools"]["rm_duplicates"]:
	samtype="rmdups"
else:
	samtype="sorted"

def getGenome(wildcards):
  return("{0}/{1}{2}".format(config["genome"][wildcards.genome]["dir"],config["genome"][wildcards.genome]["name"],config["genome"][wildcards.genome]["ext"]))



include:"rules/novoalign.smk"
include:"rules/samtools.smk"
include:"rules/umi_tools.smk"
include:"rules/cutadapt.smk"
include:"rules/rumidedup.smk"

if config["demultiplexing"]["demultiplex"]:
        rule all:
                input:
                        #expand(OUT+"/{genome}/coverage/{samtype}/{sample}_{barcode}.{samtype}.{type}.bedGraph",samtype=["umidedup","sorted"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"],type=["normalized","unnormalized","3prime_normalized","3prime_unnormalized"])
                        expand(OUT+"/{sample}_{barcode}/{genome}/coverage/{type}/{sample}_{barcode}.{type}_{genome}.{bedtype}",bedtype=["bedGraph","3primebedGraph","3prime_3prime_substitutionbedGraph","3prime_5prime_substitutionbedGraph"],type=["sorted","umidedup","rmdups","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"]),
                        # expand(OUT+"/{sample}_{barcode}/{genome}/coverage/{type}/{sample}_{barcode}.{type}_{genome}.3primebedGraph",type=["sorted","umidedup","rmdups","Rumidedup"],genome=["rDNA"],sample = config["samples"],barcode=config["demultiplexing"]["barcode"]),
                        # expand(OUT+"/{sample}_{barcode}/{genome}/coverage/{type}/{sample}_{barcode}.{type}.3primebedGraph",type=["sorted","umidedup","rmdups","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"]),
                        expand(OUT+"/{sample}_{barcode}/{genome}/coverage/{type}/{sample}_{barcode}.{type}_{genome}.bedReporting.tsv",type=["sorted","umidedup","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"])
                        #expand(OUT+"/demultiplex/{sample}_{barcode}.trimmed"+config["fastq"],sample = config["samples"],barcode=config["demultiplexing"]["barcode"])
                        #expand(OUT+"/{genome}/pyClusterReads/{sample}_{barcode}.clusters.gtf",genome=config["genome"].keys(),sample = config["samples"],barcode=config["demultiplexing"]["barcode"])
                default_target: True
else:
        rule all:
                input:
                        expand(OUT+"/{sample}/{genome}/coverage/{type}/{sample}.{type}_{genome}.{bedtype}",bedtype=["bedGraph","3primebedGraph","3prime_3prime_substitutionbedGraph","3prime_5prime_substitutionbedGraph"],type=["sorted","umidedup","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"]),
                        # expand(OUT+"/{sample}/{genome}/coverage/{type}/{sample}.{type}_{genome}.3primebedGraph",type=["sorted","umidedup","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"]),
                        expand(OUT+"/{sample}/{genome}/coverage/{type}/{sample}.{type}_{genome}.bedReporting.tsv",type=["sorted","umidedup","Rumidedup"],genome=config["genome"].keys(),sample = config["samples"])
                default_target: True




rule make_barcode:
	output: 
		OUT+"/barcode.fa"
	run:
		with open(output[0], 'w') as out:
			for k, v in config["demultiplexing"]["barcode"].items():
				if config["demultiplexing"]["five_prime"]:
					out.write(">"+str(k)+ '\n^'+ str(v) + '\n')
				else:
					out.write(">"+str(k)+ '\n'+ str(v) + '$\n')







rule pyReadCounters:
	input:
		sam=OUT+"/{prefix}/{genome}/sam/{prefix}.sam",
		gtf=lambda wildcards: config[wildcards.genome]["gtf"]
	output:
		expand(OUT+"/{{prefix}}/{{genome}}/pyReadCounters/{{prefix}}_{generation_type}",generation_type = ["hittable_reads.txt","file_statistics_reads.txt","count_output_reads.gtf"])
	conda: "envs/pipeline.yaml"
	params:
		outfile = OUT+"/{prefix}/{genome}/pyReadCounters/{prefix}"
	shell:
		"python pycrac/pyCRAC/pyReadCounters.py -f {input.sam} --file_type=sam --gtf={input.gtf} -o {params.outfile}"



rule pyClusterReads:
	input:
		gtf_pyreadcounters=OUT+"/{prefix}/{genome}/pyReadCounters/{prefix}_count_output_reads.gtf",
		gtf=lambda wildcards: config[wildcards.genome]["gtf"]
	output:
		OUT+"/{prefix}/{genome}/pyClusterReads/{prefix}.clusters.gtf"
	conda: "envs/pipeline.yaml"
	params:
		outfile = OUT+"/{prefix}/{genome}/pyClusterReads/{prefix}.clusters.gtf"
	shell:
		"python pycrac/pyCRAC/pyClusterReads.py -f {input.gtf_pyreadcounters} --gtf={input.gtf} -o {params.outfile}"



# rule generate_coverage_3prime:
# 	input:
# 		bam=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bam",
# 		bai=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bai",
# 		genome=OUT+"/{genome}_chrom.size"
# 	conda: "envs/coverage.yaml"
# 	output:
# 		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}.3primebedGraph"
# 		# expand(OUT+"/{{genome}}/coverage/{{samtype}}/{{prefix}}.{{samtype}}.{type}.bedGraph",type=["normalized","unnormalized","3prime_normalized","3prime_unnormalized"])
# 	script:
# 		"scripts/generate_coverage.R"


# rule generate_coverage:
# 	input:
# 		bam=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bam",
# 		bai=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bai"
# 	output:
# 		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}.bedGraph"
# 	conda: "envs/deeptools.yaml"
# 	shell:
# 		"bamCoverage -of bedgraph -b {input.bam} -o {output} --normalizeUsing None -bs 1"

rule generate_coverage:
	input:
		bam=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bam",
		bai=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bai",
		genome=OUT+"/{genome}_chrom.size"
	output:
		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}_{genome}.bedGraph",
		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}_{genome}.3primebedGraph",
		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}_{genome}.3prime_3prime_substitutionbedGraph",
		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}_{genome}.3prime_5prime_substitutionbedGraph"
	conda: "envs/coverage.yaml"
	script:
		"scripts/generate_coverage_perBase.R"

def getbed(wildcards):
  return(config["genome"][wildcards.genome]["bed"])


rule generate_coverage_for_rDNA:
	input:
		bam=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bam",
		bai=OUT+"/{prefix}/{genome}/bam/{samtype}/{prefix}.{samtype}.bai",
		bed=getbed
	output:
		OUT+"/{prefix}/{genome}/coverage/{samtype}/{prefix}.{samtype}_{genome}.bedReporting.tsv"
	conda: "envs/bedtools.yaml"
	#threads: 4
	shell:
		"bedtools coverage -nonamecheck -a {input.bed} -b {input.bam} > {output}"
